# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class ChatCompletionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_id': 'object',
        'configs': 'object',
        'stream': 'object',
        'messages': 'object',
        'function_call': 'object',
        'functions': 'object'
    }

    attribute_map = {
        'model_id': 'model_id',
        'configs': 'configs',
        'stream': 'stream',
        'messages': 'messages',
        'function_call': 'function_call',
        'functions': 'functions'
    }

    def __init__(self, model_id=None, configs=None, stream=None, messages=None, function_call=None, functions=None):  # noqa: E501
        """ChatCompletionRequest - a model defined in Swagger"""  # noqa: E501
        self._model_id = None
        self._configs = None
        self._stream = None
        self._messages = None
        self._function_call = None
        self._functions = None
        self.discriminator = None
        self.model_id = model_id
        if configs is not None:
            self.configs = configs
        if stream is not None:
            self.stream = stream
        self.messages = messages
        if function_call is not None:
            self.function_call = function_call
        if functions is not None:
            self.functions = functions

    @property
    def model_id(self):
        """Gets the model_id of this ChatCompletionRequest.  # noqa: E501

        The chat completion model id.  # noqa: E501

        :return: The model_id of this ChatCompletionRequest.  # noqa: E501
        :rtype: object
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ChatCompletionRequest.

        The chat completion model id.  # noqa: E501

        :param model_id: The model_id of this ChatCompletionRequest.  # noqa: E501
        :type: object
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def configs(self):
        """Gets the configs of this ChatCompletionRequest.  # noqa: E501

        The model configuration.  # noqa: E501

        :return: The configs of this ChatCompletionRequest.  # noqa: E501
        :rtype: object
        """
        return self._configs

    @configs.setter
    def configs(self, configs):
        """Sets the configs of this ChatCompletionRequest.

        The model configuration.  # noqa: E501

        :param configs: The configs of this ChatCompletionRequest.  # noqa: E501
        :type: object
        """

        self._configs = configs

    @property
    def stream(self):
        """Gets the stream of this ChatCompletionRequest.  # noqa: E501

        Indicates whether the response should be streamed. If set to True, the response will be streamed using Server-Sent Events (SSE).  # noqa: E501

        :return: The stream of this ChatCompletionRequest.  # noqa: E501
        :rtype: object
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this ChatCompletionRequest.

        Indicates whether the response should be streamed. If set to True, the response will be streamed using Server-Sent Events (SSE).  # noqa: E501

        :param stream: The stream of this ChatCompletionRequest.  # noqa: E501
        :type: object
        """

        self._stream = stream

    @property
    def messages(self):
        """Gets the messages of this ChatCompletionRequest.  # noqa: E501

        The messages to be sent to the model.  # noqa: E501

        :return: The messages of this ChatCompletionRequest.  # noqa: E501
        :rtype: object
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ChatCompletionRequest.

        The messages to be sent to the model.  # noqa: E501

        :param messages: The messages of this ChatCompletionRequest.  # noqa: E501
        :type: object
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")  # noqa: E501

        self._messages = messages

    @property
    def function_call(self):
        """Gets the function_call of this ChatCompletionRequest.  # noqa: E501

        Controls whether a specific function is invoked by the model. If set to 'none', the model will generate a message without calling a function. If set to 'auto', the model can choose between generating a message or calling a function. Defining a specific function using {'name': 'my_function'} instructs the model to call that particular function. By default, 'none' is selected when there are no functions available, and 'auto' is selected when one or more functions are present.  # noqa: E501

        :return: The function_call of this ChatCompletionRequest.  # noqa: E501
        :rtype: object
        """
        return self._function_call

    @function_call.setter
    def function_call(self, function_call):
        """Sets the function_call of this ChatCompletionRequest.

        Controls whether a specific function is invoked by the model. If set to 'none', the model will generate a message without calling a function. If set to 'auto', the model can choose between generating a message or calling a function. Defining a specific function using {'name': 'my_function'} instructs the model to call that particular function. By default, 'none' is selected when there are no functions available, and 'auto' is selected when one or more functions are present.  # noqa: E501

        :param function_call: The function_call of this ChatCompletionRequest.  # noqa: E501
        :type: object
        """

        self._function_call = function_call

    @property
    def functions(self):
        """Gets the functions of this ChatCompletionRequest.  # noqa: E501


        :return: The functions of this ChatCompletionRequest.  # noqa: E501
        :rtype: object
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this ChatCompletionRequest.


        :param functions: The functions of this ChatCompletionRequest.  # noqa: E501
        :type: object
        """

        self._functions = functions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChatCompletionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChatCompletionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
