# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class CollectionCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'object',
        'embedding_model_id': 'object',
        'name': 'object',
        'description': 'object',
        'configs': 'object',
        'metadata': 'object'
    }

    attribute_map = {
        'capacity': 'capacity',
        'embedding_model_id': 'embedding_model_id',
        'name': 'name',
        'description': 'description',
        'configs': 'configs',
        'metadata': 'metadata'
    }

    def __init__(self, capacity=None, embedding_model_id=None, name=None, description=None, configs=None, metadata=None):  # noqa: E501
        """CollectionCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._capacity = None
        self._embedding_model_id = None
        self._name = None
        self._description = None
        self._configs = None
        self._metadata = None
        self.discriminator = None
        if capacity is not None:
            self.capacity = capacity
        self.embedding_model_id = embedding_model_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if configs is not None:
            self.configs = configs
        if metadata is not None:
            self.metadata = metadata

    @property
    def capacity(self):
        """Gets the capacity of this CollectionCreateRequest.  # noqa: E501

        The collection capacity. Currently only 1000 is supported and we'll provide more options in the future.  # noqa: E501

        :return: The capacity of this CollectionCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this CollectionCreateRequest.

        The collection capacity. Currently only 1000 is supported and we'll provide more options in the future.  # noqa: E501

        :param capacity: The capacity of this CollectionCreateRequest.  # noqa: E501
        :type: object
        """

        self._capacity = capacity

    @property
    def embedding_model_id(self):
        """Gets the embedding_model_id of this CollectionCreateRequest.  # noqa: E501

        The ID of an available text embedding model in your project.  # noqa: E501

        :return: The embedding_model_id of this CollectionCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._embedding_model_id

    @embedding_model_id.setter
    def embedding_model_id(self, embedding_model_id):
        """Sets the embedding_model_id of this CollectionCreateRequest.

        The ID of an available text embedding model in your project.  # noqa: E501

        :param embedding_model_id: The embedding_model_id of this CollectionCreateRequest.  # noqa: E501
        :type: object
        """
        if embedding_model_id is None:
            raise ValueError("Invalid value for `embedding_model_id`, must not be `None`")  # noqa: E501

        self._embedding_model_id = embedding_model_id

    @property
    def name(self):
        """Gets the name of this CollectionCreateRequest.  # noqa: E501

        The collection name  # noqa: E501

        :return: The name of this CollectionCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollectionCreateRequest.

        The collection name  # noqa: E501

        :param name: The name of this CollectionCreateRequest.  # noqa: E501
        :type: object
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CollectionCreateRequest.  # noqa: E501

        The collection description  # noqa: E501

        :return: The description of this CollectionCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionCreateRequest.

        The collection description  # noqa: E501

        :param description: The description of this CollectionCreateRequest.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def configs(self):
        """Gets the configs of this CollectionCreateRequest.  # noqa: E501

        The collection configs indicating how the collection stores and indexes the text chunks. It cannot change after creation.  # noqa: E501

        :return: The configs of this CollectionCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._configs

    @configs.setter
    def configs(self, configs):
        """Sets the configs of this CollectionCreateRequest.

        The collection configs indicating how the collection stores and indexes the text chunks. It cannot change after creation.  # noqa: E501

        :param configs: The configs of this CollectionCreateRequest.  # noqa: E501
        :type: object
        """

        self._configs = configs

    @property
    def metadata(self):
        """Gets the metadata of this CollectionCreateRequest.  # noqa: E501

        The collection metadata. It can store up to 16 key-value pairs where each key's length is less than 64 and value's length is less than 512.  # noqa: E501

        :return: The metadata of this CollectionCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CollectionCreateRequest.

        The collection metadata. It can store up to 16 key-value pairs where each key's length is less than 64 and value's length is less than 512.  # noqa: E501

        :param metadata: The metadata of this CollectionCreateRequest.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
