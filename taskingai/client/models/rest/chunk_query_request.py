# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class ChunkQueryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'top_k': 'object',
        'query_text': 'object'
    }

    attribute_map = {
        'top_k': 'top_k',
        'query_text': 'query_text'
    }

    def __init__(self, top_k=None, query_text=None):  # noqa: E501
        """ChunkQueryRequest - a model defined in Swagger"""  # noqa: E501
        self._top_k = None
        self._query_text = None
        self.discriminator = None
        self.top_k = top_k
        self.query_text = query_text

    @property
    def top_k(self):
        """Gets the top_k of this ChunkQueryRequest.  # noqa: E501

        The number of most relevant chunks to return.  # noqa: E501

        :return: The top_k of this ChunkQueryRequest.  # noqa: E501
        :rtype: object
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this ChunkQueryRequest.

        The number of most relevant chunks to return.  # noqa: E501

        :param top_k: The top_k of this ChunkQueryRequest.  # noqa: E501
        :type: object
        """
        if top_k is None:
            raise ValueError("Invalid value for `top_k`, must not be `None`")  # noqa: E501

        self._top_k = top_k

    @property
    def query_text(self):
        """Gets the query_text of this ChunkQueryRequest.  # noqa: E501

        The query text. Retrieval service will find and return the most relevant chunks to this text.  # noqa: E501

        :return: The query_text of this ChunkQueryRequest.  # noqa: E501
        :rtype: object
        """
        return self._query_text

    @query_text.setter
    def query_text(self, query_text):
        """Sets the query_text of this ChunkQueryRequest.

        The query text. Retrieval service will find and return the most relevant chunks to this text.  # noqa: E501

        :param query_text: The query_text of this ChunkQueryRequest.  # noqa: E501
        :type: object
        """
        if query_text is None:
            raise ValueError("Invalid value for `query_text`, must not be `None`")  # noqa: E501

        self._query_text = query_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChunkQueryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChunkQueryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
