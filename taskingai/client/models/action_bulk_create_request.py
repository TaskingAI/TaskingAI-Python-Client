# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class ActionBulkCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema': 'object',
        'authentication': 'object'
    }

    attribute_map = {
        'schema': 'schema',
        'authentication': 'authentication'
    }

    def __init__(self, schema=None, authentication=None):  # noqa: E501
        """ActionBulkCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._schema = None
        self._authentication = None
        self.discriminator = None
        self.schema = schema
        if authentication is not None:
            self.authentication = authentication

    @property
    def schema(self):
        """Gets the schema of this ActionBulkCreateRequest.  # noqa: E501

        The action schema is compliant with the OpenAPI Specification. If there are multiple paths and methods in the schema, the service will create multiple actions whose schema only has exactly one path and one method  # noqa: E501

        :return: The schema of this ActionBulkCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this ActionBulkCreateRequest.

        The action schema is compliant with the OpenAPI Specification. If there are multiple paths and methods in the schema, the service will create multiple actions whose schema only has exactly one path and one method  # noqa: E501

        :param schema: The schema of this ActionBulkCreateRequest.  # noqa: E501
        :type: object
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def authentication(self):
        """Gets the authentication of this ActionBulkCreateRequest.  # noqa: E501

        The action API authentication.  # noqa: E501

        :return: The authentication of this ActionBulkCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ActionBulkCreateRequest.

        The action API authentication.  # noqa: E501

        :param authentication: The authentication of this ActionBulkCreateRequest.  # noqa: E501
        :type: object
        """

        self._authentication = authentication

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionBulkCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionBulkCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
