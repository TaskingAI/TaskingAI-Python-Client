# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class Function(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'object',
        'function_id': 'object',
        'name': 'object',
        'description': 'object',
        'parameters': 'object',
        'created_timestamp': 'object'
    }

    attribute_map = {
        'object': 'object',
        'function_id': 'function_id',
        'name': 'name',
        'description': 'description',
        'parameters': 'parameters',
        'created_timestamp': 'created_timestamp'
    }

    def __init__(self, object=None, function_id=None, name=None, description=None, parameters=None, created_timestamp=None):  # noqa: E501
        """Function - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._function_id = None
        self._name = None
        self._description = None
        self._parameters = None
        self._created_timestamp = None
        self.discriminator = None
        self.object = object
        self.function_id = function_id
        self.name = name
        self.description = description
        self.parameters = parameters
        self.created_timestamp = created_timestamp

    @property
    def object(self):
        """Gets the object of this Function.  # noqa: E501

        The object type, which is always `Function`.  # noqa: E501

        :return: The object of this Function.  # noqa: E501
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Function.

        The object type, which is always `Function`.  # noqa: E501

        :param object: The object of this Function.  # noqa: E501
        :type: object
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def function_id(self):
        """Gets the function_id of this Function.  # noqa: E501

        The function ID.  # noqa: E501

        :return: The function_id of this Function.  # noqa: E501
        :rtype: object
        """
        return self._function_id

    @function_id.setter
    def function_id(self, function_id):
        """Sets the function_id of this Function.

        The function ID.  # noqa: E501

        :param function_id: The function_id of this Function.  # noqa: E501
        :type: object
        """
        if function_id is None:
            raise ValueError("Invalid value for `function_id`, must not be `None`")  # noqa: E501

        self._function_id = function_id

    @property
    def name(self):
        """Gets the name of this Function.  # noqa: E501

        The function name  # noqa: E501

        :return: The name of this Function.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Function.

        The function name  # noqa: E501

        :param name: The name of this Function.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Function.  # noqa: E501

        The function description  # noqa: E501

        :return: The description of this Function.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Function.

        The function description  # noqa: E501

        :param description: The description of this Function.  # noqa: E501
        :type: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def parameters(self):
        """Gets the parameters of this Function.  # noqa: E501

        The function parameter schema.  # noqa: E501

        :return: The parameters of this Function.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Function.

        The function parameter schema.  # noqa: E501

        :param parameters: The parameters of this Function.  # noqa: E501
        :type: object
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Function.  # noqa: E501

        The timestamp of the function creation.  # noqa: E501

        :return: The created_timestamp of this Function.  # noqa: E501
        :rtype: object
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Function.

        The timestamp of the function creation.  # noqa: E501

        :param created_timestamp: The created_timestamp of this Function.  # noqa: E501
        :type: object
        """
        if created_timestamp is None:
            raise ValueError("Invalid value for `created_timestamp`, must not be `None`")  # noqa: E501

        self._created_timestamp = created_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Function, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Function):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
