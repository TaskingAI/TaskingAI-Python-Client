# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class ChatCompletionAssistantMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'object',
        'role': 'object',
        'function_call': 'object'
    }

    attribute_map = {
        'content': 'content',
        'role': 'role',
        'function_call': 'function_call'
    }

    def __init__(self, content=None, role=None, function_call=None):  # noqa: E501
        """ChatCompletionAssistantMessage - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._role = None
        self._function_call = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if role is not None:
            self.role = role
        if function_call is not None:
            self.function_call = function_call

    @property
    def content(self):
        """Gets the content of this ChatCompletionAssistantMessage.  # noqa: E501

        The content of the message.  # noqa: E501

        :return: The content of this ChatCompletionAssistantMessage.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ChatCompletionAssistantMessage.

        The content of the message.  # noqa: E501

        :param content: The content of this ChatCompletionAssistantMessage.  # noqa: E501
        :type: object
        """

        self._content = content

    @property
    def role(self):
        """Gets the role of this ChatCompletionAssistantMessage.  # noqa: E501

        The role of the message, which is always 'assistant' for an assistant message  # noqa: E501

        :return: The role of this ChatCompletionAssistantMessage.  # noqa: E501
        :rtype: object
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ChatCompletionAssistantMessage.

        The role of the message, which is always 'assistant' for an assistant message  # noqa: E501

        :param role: The role of this ChatCompletionAssistantMessage.  # noqa: E501
        :type: object
        """

        self._role = role

    @property
    def function_call(self):
        """Gets the function_call of this ChatCompletionAssistantMessage.  # noqa: E501

        The funcion call requested by the assistant.  # noqa: E501

        :return: The function_call of this ChatCompletionAssistantMessage.  # noqa: E501
        :rtype: object
        """
        return self._function_call

    @function_call.setter
    def function_call(self, function_call):
        """Sets the function_call of this ChatCompletionAssistantMessage.

        The funcion call requested by the assistant.  # noqa: E501

        :param function_call: The function_call of this ChatCompletionAssistantMessage.  # noqa: E501
        :type: object
        """

        self._function_call = function_call

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChatCompletionAssistantMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChatCompletionAssistantMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
