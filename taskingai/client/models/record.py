# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class Record(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'object',
        'record_id': 'object',
        'collection_id': 'object',
        'type': 'object',
        'num_chunks': 'object',
        'content': 'object',
        'metadata': 'object',
        'created_timestamp': 'object',
        'status': 'object'
    }

    attribute_map = {
        'object': 'object',
        'record_id': 'record_id',
        'collection_id': 'collection_id',
        'type': 'type',
        'num_chunks': 'num_chunks',
        'content': 'content',
        'metadata': 'metadata',
        'created_timestamp': 'created_timestamp',
        'status': 'status'
    }

    def __init__(self, object=None, record_id=None, collection_id=None, type=None, num_chunks=None, content=None, metadata=None, created_timestamp=None, status=None):  # noqa: E501
        """Record - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._record_id = None
        self._collection_id = None
        self._type = None
        self._num_chunks = None
        self._content = None
        self._metadata = None
        self._created_timestamp = None
        self._status = None
        self.discriminator = None
        self.object = object
        self.record_id = record_id
        self.collection_id = collection_id
        self.type = type
        self.num_chunks = num_chunks
        self.content = content
        self.metadata = metadata
        self.created_timestamp = created_timestamp
        self.status = status

    @property
    def object(self):
        """Gets the object of this Record.  # noqa: E501

        The object type, which is always `Record`.  # noqa: E501

        :return: The object of this Record.  # noqa: E501
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Record.

        The object type, which is always `Record`.  # noqa: E501

        :param object: The object of this Record.  # noqa: E501
        :type: object
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def record_id(self):
        """Gets the record_id of this Record.  # noqa: E501

        The record ID.  # noqa: E501

        :return: The record_id of this Record.  # noqa: E501
        :rtype: object
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this Record.

        The record ID.  # noqa: E501

        :param record_id: The record_id of this Record.  # noqa: E501
        :type: object
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")  # noqa: E501

        self._record_id = record_id

    @property
    def collection_id(self):
        """Gets the collection_id of this Record.  # noqa: E501

        The collection ID.  # noqa: E501

        :return: The collection_id of this Record.  # noqa: E501
        :rtype: object
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this Record.

        The collection ID.  # noqa: E501

        :param collection_id: The collection_id of this Record.  # noqa: E501
        :type: object
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")  # noqa: E501

        self._collection_id = collection_id

    @property
    def type(self):
        """Gets the type of this Record.  # noqa: E501

        The record type, which is always `text` or `file`.  # noqa: E501

        :return: The type of this Record.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Record.

        The record type, which is always `text` or `file`.  # noqa: E501

        :param type: The type of this Record.  # noqa: E501
        :type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def num_chunks(self):
        """Gets the num_chunks of this Record.  # noqa: E501

        The number of chunks in the record.  # noqa: E501

        :return: The num_chunks of this Record.  # noqa: E501
        :rtype: object
        """
        return self._num_chunks

    @num_chunks.setter
    def num_chunks(self, num_chunks):
        """Sets the num_chunks of this Record.

        The number of chunks in the record.  # noqa: E501

        :param num_chunks: The num_chunks of this Record.  # noqa: E501
        :type: object
        """
        if num_chunks is None:
            raise ValueError("Invalid value for `num_chunks`, must not be `None`")  # noqa: E501

        self._num_chunks = num_chunks

    @property
    def content(self):
        """Gets the content of this Record.  # noqa: E501

        The record content.  # noqa: E501

        :return: The content of this Record.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Record.

        The record content.  # noqa: E501

        :param content: The content of this Record.  # noqa: E501
        :type: object
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def metadata(self):
        """Gets the metadata of this Record.  # noqa: E501

        The record metadata. It can store up to 16 key-value pairs where each key's length is less than 64 and value's length is less than 512.  # noqa: E501

        :return: The metadata of this Record.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Record.

        The record metadata. It can store up to 16 key-value pairs where each key's length is less than 64 and value's length is less than 512.  # noqa: E501

        :param metadata: The metadata of this Record.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Record.  # noqa: E501

        The timestamp when the record was created.  # noqa: E501

        :return: The created_timestamp of this Record.  # noqa: E501
        :rtype: object
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Record.

        The timestamp when the record was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this Record.  # noqa: E501
        :type: object
        """
        if created_timestamp is None:
            raise ValueError("Invalid value for `created_timestamp`, must not be `None`")  # noqa: E501

        self._created_timestamp = created_timestamp

    @property
    def status(self):
        """Gets the status of this Record.  # noqa: E501

        The record status, which can be `creating`, `ready`, `deleting`, `error` or `partial`.  # noqa: E501

        :return: The status of this Record.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Record.

        The record status, which can be `creating`, `ready`, `deleting`, `error` or `partial`.  # noqa: E501

        :param status: The status of this Record.  # noqa: E501
        :type: object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Record, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Record):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
