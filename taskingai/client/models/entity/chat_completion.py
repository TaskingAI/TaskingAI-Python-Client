# coding: utf-8

"""
    TaskingAI API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChatCompletion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'object',
        'finish_reason': 'object',
        'message': 'object',
        'created_timestamp': 'object'
    }

    attribute_map = {
        'object': 'object',
        'finish_reason': 'finish_reason',
        'message': 'message',
        'created_timestamp': 'created_timestamp'
    }

    def __init__(self, object=None, finish_reason=None, message=None, created_timestamp=None):  # noqa: E501
        """ChatCompletion - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._finish_reason = None
        self._message = None
        self._created_timestamp = None
        self.discriminator = None
        self.object = object
        self.finish_reason = finish_reason
        self.message = message
        self.created_timestamp = created_timestamp

    @property
    def object(self):
        """Gets the object of this ChatCompletion.  # noqa: E501

        The object type, which is always 'ChatCompletion'.  # noqa: E501

        :return: The object of this ChatCompletion.  # noqa: E501
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ChatCompletion.

        The object type, which is always 'ChatCompletion'.  # noqa: E501

        :param object: The object of this ChatCompletion.  # noqa: E501
        :type: object
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def finish_reason(self):
        """Gets the finish_reason of this ChatCompletion.  # noqa: E501

        The reason why the generation is finished.  # noqa: E501

        :return: The finish_reason of this ChatCompletion.  # noqa: E501
        :rtype: object
        """
        return self._finish_reason

    @finish_reason.setter
    def finish_reason(self, finish_reason):
        """Sets the finish_reason of this ChatCompletion.

        The reason why the generation is finished.  # noqa: E501

        :param finish_reason: The finish_reason of this ChatCompletion.  # noqa: E501
        :type: object
        """
        if finish_reason is None:
            raise ValueError("Invalid value for `finish_reason`, must not be `None`")  # noqa: E501

        self._finish_reason = finish_reason

    @property
    def message(self):
        """Gets the message of this ChatCompletion.  # noqa: E501

        The message generated by the assistant.  # noqa: E501

        :return: The message of this ChatCompletion.  # noqa: E501
        :rtype: object
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ChatCompletion.

        The message generated by the assistant.  # noqa: E501

        :param message: The message of this ChatCompletion.  # noqa: E501
        :type: object
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ChatCompletion.  # noqa: E501

        The timestamp in milliseconds when the response is created.  # noqa: E501

        :return: The created_timestamp of this ChatCompletion.  # noqa: E501
        :rtype: object
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ChatCompletion.

        The timestamp in milliseconds when the response is created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this ChatCompletion.  # noqa: E501
        :type: object
        """
        if created_timestamp is None:
            raise ValueError("Invalid value for `created_timestamp`, must not be `None`")  # noqa: E501

        self._created_timestamp = created_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChatCompletion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChatCompletion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
