# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class Chunk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'object',
        'chunk_id': 'object',
        'record_id': 'object',
        'collection_id': 'object',
        'text': 'object',
        'score': 'object'
    }

    attribute_map = {
        'object': 'object',
        'chunk_id': 'chunk_id',
        'record_id': 'record_id',
        'collection_id': 'collection_id',
        'text': 'text',
        'score': 'score'
    }

    def __init__(self, object=None, chunk_id=None, record_id=None, collection_id=None, text=None, score=None):  # noqa: E501
        """Chunk - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._chunk_id = None
        self._record_id = None
        self._collection_id = None
        self._text = None
        self._score = None
        self.discriminator = None
        self.object = object
        self.chunk_id = chunk_id
        self.record_id = record_id
        self.collection_id = collection_id
        self.text = text
        self.score = score

    @property
    def object(self):
        """Gets the object of this Chunk.  # noqa: E501

        The object type, which is always `Chunk`.  # noqa: E501

        :return: The object of this Chunk.  # noqa: E501
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Chunk.

        The object type, which is always `Chunk`.  # noqa: E501

        :param object: The object of this Chunk.  # noqa: E501
        :type: object
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def chunk_id(self):
        """Gets the chunk_id of this Chunk.  # noqa: E501

        The chunk ID.  # noqa: E501

        :return: The chunk_id of this Chunk.  # noqa: E501
        :rtype: object
        """
        return self._chunk_id

    @chunk_id.setter
    def chunk_id(self, chunk_id):
        """Sets the chunk_id of this Chunk.

        The chunk ID.  # noqa: E501

        :param chunk_id: The chunk_id of this Chunk.  # noqa: E501
        :type: object
        """
        if chunk_id is None:
            raise ValueError("Invalid value for `chunk_id`, must not be `None`")  # noqa: E501

        self._chunk_id = chunk_id

    @property
    def record_id(self):
        """Gets the record_id of this Chunk.  # noqa: E501

        The record ID of the chunk  # noqa: E501

        :return: The record_id of this Chunk.  # noqa: E501
        :rtype: object
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this Chunk.

        The record ID of the chunk  # noqa: E501

        :param record_id: The record_id of this Chunk.  # noqa: E501
        :type: object
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")  # noqa: E501

        self._record_id = record_id

    @property
    def collection_id(self):
        """Gets the collection_id of this Chunk.  # noqa: E501

        The collection ID of the chunk  # noqa: E501

        :return: The collection_id of this Chunk.  # noqa: E501
        :rtype: object
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this Chunk.

        The collection ID of the chunk  # noqa: E501

        :param collection_id: The collection_id of this Chunk.  # noqa: E501
        :type: object
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")  # noqa: E501

        self._collection_id = collection_id

    @property
    def text(self):
        """Gets the text of this Chunk.  # noqa: E501

        The chunk text  # noqa: E501

        :return: The text of this Chunk.  # noqa: E501
        :rtype: object
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Chunk.

        The chunk text  # noqa: E501

        :param text: The text of this Chunk.  # noqa: E501
        :type: object
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def score(self):
        """Gets the score of this Chunk.  # noqa: E501

        The chunk score indicating the relevance to the params text.  # noqa: E501

        :return: The score of this Chunk.  # noqa: E501
        :rtype: object
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Chunk.

        The chunk score indicating the relevance to the params text.  # noqa: E501

        :param score: The score of this Chunk.  # noqa: E501
        :type: object
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Chunk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Chunk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
