# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class Assistant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'object',
        'assistant_id': 'object',
        'model_id': 'object',
        'name': 'object',
        'description': 'object',
        'system_prompt_template': 'object',
        'tools': 'object',
        'retrievals': 'object',
        'metadata': 'object',
        'created_timestamp': 'object'
    }

    attribute_map = {
        'object': 'object',
        'assistant_id': 'assistant_id',
        'model_id': 'model_id',
        'name': 'name',
        'description': 'description',
        'system_prompt_template': 'system_prompt_template',
        'tools': 'tools',
        'retrievals': 'retrievals',
        'metadata': 'metadata',
        'created_timestamp': 'created_timestamp'
    }

    def __init__(self, object=None, assistant_id=None, model_id=None, name=None, description=None, system_prompt_template=None, tools=None, retrievals=None, metadata=None, created_timestamp=None):  # noqa: E501
        """Assistant - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._assistant_id = None
        self._model_id = None
        self._name = None
        self._description = None
        self._system_prompt_template = None
        self._tools = None
        self._retrievals = None
        self._metadata = None
        self._created_timestamp = None
        self.discriminator = None
        self.object = object
        self.assistant_id = assistant_id
        self.model_id = model_id
        self.name = name
        self.description = description
        self.system_prompt_template = system_prompt_template
        self.tools = tools
        self.retrievals = retrievals
        self.metadata = metadata
        self.created_timestamp = created_timestamp

    @property
    def object(self):
        """Gets the object of this Assistant.  # noqa: E501

        The object type, which is always `Assistant`.  # noqa: E501

        :return: The object of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Assistant.

        The object type, which is always `Assistant`.  # noqa: E501

        :param object: The object of this Assistant.  # noqa: E501
        :type: object
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def assistant_id(self): 
        """Gets the assistant_id of this Assistant.  # noqa: E501

        The assistant ID.  # noqa: E501

        :return: The assistant_id of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this Assistant.

        The assistant ID.  # noqa: E501

        :param assistant_id: The assistant_id of this Assistant.  # noqa: E501
        :type: object
        """
        if assistant_id is None:
            raise ValueError("Invalid value for `assistant_id`, must not be `None`")  # noqa: E501

        self._assistant_id = assistant_id

    @property
    def model_id(self):
        """Gets the model_id of this Assistant.  # noqa: E501

        The ID of an available chat completion model in your project.  # noqa: E501

        :return: The model_id of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Assistant.

        The ID of an available chat completion model in your project.  # noqa: E501

        :param model_id: The model_id of this Assistant.  # noqa: E501
        :type: object
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this Assistant.  # noqa: E501

        The assistant name  # noqa: E501

        :return: The name of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Assistant.

        The assistant name  # noqa: E501

        :param name: The name of this Assistant.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this Assistant.  # noqa: E501

        The assistant description  # noqa: E501

        :return: The description of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Assistant.

        The assistant description  # noqa: E501

        :param description: The description of this Assistant.  # noqa: E501
        :type: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def system_prompt_template(self):
        """Gets the system_prompt_template of this Assistant.  # noqa: E501

        A list of system prompt chunks where prompt variables are wrapped by curly brackets, e.g. `{{variable}}`.  # noqa: E501

        :return: The system_prompt_template of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._system_prompt_template

    @system_prompt_template.setter
    def system_prompt_template(self, system_prompt_template):
        """Sets the system_prompt_template of this Assistant.

        A list of system prompt chunks where prompt variables are wrapped by curly brackets, e.g. `{{variable}}`.  # noqa: E501

        :param system_prompt_template: The system_prompt_template of this Assistant.  # noqa: E501
        :type: object
        """
        if system_prompt_template is None:
            raise ValueError("Invalid value for `system_prompt_template`, must not be `None`")

        self._system_prompt_template = system_prompt_template

    @property
    def tools(self):
        """Gets the tools of this Assistant.  # noqa: E501

        A list of tools.  # noqa: E501

        :return: The tools of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this Assistant.

        A list of tools.  # noqa: E501

        :param tools: The tools of this Assistant.  # noqa: E501
        :type: object
        """
        if tools is None:
            raise ValueError("Invalid value for `tools`, must not be `None`")  # noqa: E501

        self._tools = tools

    @property
    def retrievals(self):
        """Gets the retrievals of this Assistant.  # noqa: E501

        A list of retrieval sources.  # noqa: E501

        :return: The retrievals of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._retrievals

    @retrievals.setter
    def retrievals(self, retrievals):
        """Sets the retrievals of this Assistant.

        A list of retrieval sources.  # noqa: E501

        :param retrievals: The retrievals of this Assistant.  # noqa: E501
        :type: object
        """
        if retrievals is None:
            raise ValueError("Invalid value for `retrievals`, must not be `None`")  # noqa: E501

        self._retrievals = retrievals

    @property
    def metadata(self):
        """Gets the metadata of this Assistant.  # noqa: E501

        The assistant metadata. It can store up to 16 key-value pairs where each key's length is less than 64 and value's length is less than 512.  # noqa: E501

        :return: The metadata of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Assistant.

        The assistant metadata. It can store up to 16 key-value pairs where each key's length is less than 64 and value's length is less than 512.  # noqa: E501

        :param metadata: The metadata of this Assistant.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Assistant.  # noqa: E501

        The timestamp when the assistant was created.  # noqa: E501

        :return: The created_timestamp of this Assistant.  # noqa: E501
        :rtype: object
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Assistant.

        The timestamp when the assistant was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this Assistant.  # noqa: E501
        :type: object
        """
        if created_timestamp is None:
            raise ValueError("Invalid value for `created_timestamp`, must not be `None`")  # noqa: E501

        self._created_timestamp = created_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Assistant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assistant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
