# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class MessageGenerationResponseOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stream': 'object',
        'tool_log': 'object',
        'retrieval_log': 'object'
    }

    attribute_map = {
        'stream': 'stream',
        'tool_log': 'tool_log',
        'retrieval_log': 'retrieval_log'
    }

    def __init__(self, stream=None, tool_log=None, retrieval_log=None):  # noqa: E501
        """MessageGenerationResponseOption - a model defined in Swagger"""  # noqa: E501
        self._stream = None
        self._tool_log = None
        self._retrieval_log = None
        self.discriminator = None
        if stream is not None:
            self.stream = stream
        if tool_log is not None:
            self.tool_log = tool_log
        if retrieval_log is not None:
            self.retrieval_log = retrieval_log

    @property
    def stream(self):
        """Gets the stream of this MessageGenerationResponseOption.  # noqa: E501

        Whether to return the assistant message in stream format.  # noqa: E501

        :return: The stream of this MessageGenerationResponseOption.  # noqa: E501
        :rtype: object
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this MessageGenerationResponseOption.

        Whether to return the assistant message in stream format.  # noqa: E501

        :param stream: The stream of this MessageGenerationResponseOption.  # noqa: E501
        :type: object
        """

        self._stream = stream

    @property
    def tool_log(self):
        """Gets the tool_log of this MessageGenerationResponseOption.  # noqa: E501

        Whether to include the tool call information and result in the response.  # noqa: E501

        :return: The tool_log of this MessageGenerationResponseOption.  # noqa: E501
        :rtype: object
        """
        return self._tool_log

    @tool_log.setter
    def tool_log(self, tool_log):
        """Sets the tool_log of this MessageGenerationResponseOption.

        Whether to include the tool call information and result in the response.  # noqa: E501

        :param tool_log: The tool_log of this MessageGenerationResponseOption.  # noqa: E501
        :type: object
        """

        self._tool_log = tool_log

    @property
    def retrieval_log(self):
        """Gets the retrieval_log of this MessageGenerationResponseOption.  # noqa: E501

        Whether to include the retrieval call in the response.  # noqa: E501

        :return: The retrieval_log of this MessageGenerationResponseOption.  # noqa: E501
        :rtype: object
        """
        return self._retrieval_log

    @retrieval_log.setter
    def retrieval_log(self, retrieval_log):
        """Sets the retrieval_log of this MessageGenerationResponseOption.

        Whether to include the retrieval call in the response.  # noqa: E501

        :param retrieval_log: The retrieval_log of this MessageGenerationResponseOption.  # noqa: E501
        :type: object
        """

        self._retrieval_log = retrieval_log

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageGenerationResponseOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageGenerationResponseOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
