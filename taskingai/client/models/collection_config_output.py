# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class CollectionConfigOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chunk_size': 'object',
        'chunk_overlap': 'object',
        'metric': 'object'
    }

    attribute_map = {
        'chunk_size': 'chunk_size',
        'chunk_overlap': 'chunk_overlap',
        'metric': 'metric'
    }

    def __init__(self, chunk_size=None, chunk_overlap=None, metric=None):  # noqa: E501
        """CollectionConfigOutput - a model defined in Swagger"""  # noqa: E501
        self._chunk_size = None
        self._chunk_overlap = None
        self._metric = None
        self.discriminator = None
        self.chunk_size = chunk_size
        self.chunk_overlap = chunk_overlap
        self.metric = metric

    @property
    def chunk_size(self):
        """Gets the chunk_size of this CollectionConfigOutput.  # noqa: E501

        Chunk size determines the max size of the text chunks in the collection. It is counted by number of chunk text tokens.  # noqa: E501

        :return: The chunk_size of this CollectionConfigOutput.  # noqa: E501
        :rtype: object
        """
        return self._chunk_size

    @chunk_size.setter
    def chunk_size(self, chunk_size):
        """Sets the chunk_size of this CollectionConfigOutput.

        Chunk size determines the max size of the text chunks in the collection. It is counted by number of chunk text tokens.  # noqa: E501

        :param chunk_size: The chunk_size of this CollectionConfigOutput.  # noqa: E501
        :type: object
        """
        if chunk_size is None:
            raise ValueError("Invalid value for `chunk_size`, must not be `None`")  # noqa: E501

        self._chunk_size = chunk_size

    @property
    def chunk_overlap(self):
        """Gets the chunk_overlap of this CollectionConfigOutput.  # noqa: E501

        Chunk overlap specifies how much overlap there should be between chunks, counted by number of chunk text tokens. It cannot be larger than `chunk_size`.  # noqa: E501

        :return: The chunk_overlap of this CollectionConfigOutput.  # noqa: E501
        :rtype: object
        """
        return self._chunk_overlap

    @chunk_overlap.setter
    def chunk_overlap(self, chunk_overlap):
        """Sets the chunk_overlap of this CollectionConfigOutput.

        Chunk overlap specifies how much overlap there should be between chunks, counted by number of chunk text tokens. It cannot be larger than `chunk_size`.  # noqa: E501

        :param chunk_overlap: The chunk_overlap of this CollectionConfigOutput.  # noqa: E501
        :type: object
        """
        if chunk_overlap is None:
            raise ValueError("Invalid value for `chunk_overlap`, must not be `None`")  # noqa: E501

        self._chunk_overlap = chunk_overlap

    @property
    def metric(self):
        """Gets the metric of this CollectionConfigOutput.  # noqa: E501

        The text chunks are embedded into a vector space_schema and the similarity between two chunks is measured by the cosine distance between their vectors. Currently only `cosine` is supported and we'll provide more options in the future.  # noqa: E501

        :return: The metric of this CollectionConfigOutput.  # noqa: E501
        :rtype: object
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this CollectionConfigOutput.

        The text chunks are embedded into a vector space_schema and the similarity between two chunks is measured by the cosine distance between their vectors. Currently only `cosine` is supported and we'll provide more options in the future.  # noqa: E501

        :param metric: The metric of this CollectionConfigOutput.  # noqa: E501
        :type: object
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionConfigOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionConfigOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
