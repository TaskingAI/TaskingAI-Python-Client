# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class Chat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'object',
        'chat_id': 'object',
        'assistant_id': 'object',
        'metadata': 'object',
        'created_timestamp': 'object'
    }

    attribute_map = {
        'object': 'object',
        'chat_id': 'chat_id',
        'assistant_id': 'assistant_id',
        'metadata': 'metadata',
        'created_timestamp': 'created_timestamp'
    }

    def __init__(self, object=None, chat_id=None, assistant_id=None, metadata=None, created_timestamp=None):  # noqa: E501
        """Chat - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._chat_id = None
        self._assistant_id = None
        self._metadata = None
        self._created_timestamp = None
        self.discriminator = None
        self.object = object
        self.chat_id = chat_id
        self.assistant_id = assistant_id
        self.metadata = metadata
        self.created_timestamp = created_timestamp

    @property
    def object(self):
        """Gets the object of this Chat.  # noqa: E501

        The object type, which is always `Chat`.  # noqa: E501

        :return: The object of this Chat.  # noqa: E501
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Chat.

        The object type, which is always `Chat`.  # noqa: E501

        :param object: The object of this Chat.  # noqa: E501
        :type: object
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def chat_id(self):
        """Gets the chat_id of this Chat.  # noqa: E501

        The chat ID.  # noqa: E501

        :return: The chat_id of this Chat.  # noqa: E501
        :rtype: object
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this Chat.

        The chat ID.  # noqa: E501

        :param chat_id: The chat_id of this Chat.  # noqa: E501
        :type: object
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")  # noqa: E501

        self._chat_id = chat_id

    @property
    def assistant_id(self):
        """Gets the assistant_id of this Chat.  # noqa: E501

        The assistant ID.  # noqa: E501

        :return: The assistant_id of this Chat.  # noqa: E501
        :rtype: object
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this Chat.

        The assistant ID.  # noqa: E501

        :param assistant_id: The assistant_id of this Chat.  # noqa: E501
        :type: object
        """
        if assistant_id is None:
            raise ValueError("Invalid value for `assistant_id`, must not be `None`")  # noqa: E501

        self._assistant_id = assistant_id

    @property
    def metadata(self):
        """Gets the metadata of this Chat.  # noqa: E501

        The chat metadata. It can store up to 16 key-value pairs where each key's length is less than 64 and value's length is less than 512.  # noqa: E501

        :return: The metadata of this Chat.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Chat.

        The chat metadata. It can store up to 16 key-value pairs where each key's length is less than 64 and value's length is less than 512.  # noqa: E501

        :param metadata: The metadata of this Chat.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Chat.  # noqa: E501

        The timestamp when the chat was created.  # noqa: E501

        :return: The created_timestamp of this Chat.  # noqa: E501
        :rtype: object
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Chat.

        The timestamp when the chat was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this Chat.  # noqa: E501
        :type: object
        """
        if created_timestamp is None:
            raise ValueError("Invalid value for `created_timestamp`, must not be `None`")  # noqa: E501

        self._created_timestamp = created_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Chat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Chat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
