# coding: utf-8

"""
    TaskingAI API

    OpenAPI spec version: 0.1.0
"""

import pprint
import re  # noqa: F401

import six

class Action(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'object',
        'action_id': 'object',
        'schema': 'object',
        'authentication': 'object',
        'created_timestamp': 'object'
    }

    attribute_map = {
        'object': 'object',
        'action_id': 'action_id',
        'schema': 'schema',
        'authentication': 'authentication',
        'created_timestamp': 'created_timestamp'
    }

    def __init__(self, object=None, action_id=None, schema=None, authentication=None, created_timestamp=None):  # noqa: E501
        """Action - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._action_id = None
        self._schema = None
        self._authentication = None
        self._created_timestamp = None
        self.discriminator = None
        self.object = object
        self.action_id = action_id
        self.schema = schema
        self.authentication = authentication
        self.created_timestamp = created_timestamp

    @property
    def object(self):
        """Gets the object of this Action.  # noqa: E501

        The object type, which is always `Action`.  # noqa: E501

        :return: The object of this Action.  # noqa: E501
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Action.

        The object type, which is always `Action`.  # noqa: E501

        :param object: The object of this Action.  # noqa: E501
        :type: object
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def action_id(self):
        """Gets the action_id of this Action.  # noqa: E501

        The action ID.  # noqa: E501

        :return: The action_id of this Action.  # noqa: E501
        :rtype: object
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this Action.

        The action ID.  # noqa: E501

        :param action_id: The action_id of this Action.  # noqa: E501
        :type: object
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")  # noqa: E501

        self._action_id = action_id

    @property
    def schema(self):
        """Gets the schema of this Action.  # noqa: E501

        The action schema, which is compliant with the OpenAPI Specification.  # noqa: E501

        :return: The schema of this Action.  # noqa: E501
        :rtype: object
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this Action.

        The action schema, which is compliant with the OpenAPI Specification.  # noqa: E501

        :param schema: The schema of this Action.  # noqa: E501
        :type: object
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def authentication(self):
        """Gets the authentication of this Action.  # noqa: E501

        The action authentication.  # noqa: E501

        :return: The authentication of this Action.  # noqa: E501
        :rtype: object
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this Action.

        The action authentication.  # noqa: E501

        :param authentication: The authentication of this Action.  # noqa: E501
        :type: object
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")  # noqa: E501

        self._authentication = authentication

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Action.  # noqa: E501

        The timestamp of the action creation.  # noqa: E501

        :return: The created_timestamp of this Action.  # noqa: E501
        :rtype: object
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Action.

        The timestamp of the action creation.  # noqa: E501

        :param created_timestamp: The created_timestamp of this Action.  # noqa: E501
        :type: object
        """
        if created_timestamp is None:
            raise ValueError("Invalid value for `created_timestamp`, must not be `None`")  # noqa: E501

        self._created_timestamp = created_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Action, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
